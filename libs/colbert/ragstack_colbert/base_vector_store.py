"""
This module defines abstract base classes for implementing storage mechanisms for text chunk
embeddings, specifically designed to work with ColBERT or similar embedding models.
"""

from abc import ABC, abstractmethod
from typing import List, Optional, Tuple

from torch import Tensor

from .objects import BaseChunk, ChunkData, EmbeddedChunk


class BaseVectorStore(ABC):
    """
    Abstract base class (ABC) for a storage system designed to hold vector representations of text chunks,
    typically generated by a ColBERT model or similar embedding model.

    This class defines the interface for storing and managing the embedded text chunks, supporting
    operations like adding new chunks to the store and deleting existing documents by their identifiers.
    """

    @abstractmethod
    def put_chunks(
        self, chunks: List[EmbeddedChunk], delete_existing: Optional[bool] = False
    ) -> None:
        """
        Stores a list of embedded text chunks in the vector store, with an option to delete existing
        entries before insertion.

        Parameters:
            chunks (List[EmbeddedChunk]): A list of `EmbeddedChunk` instances to be stored.
            delete_existing (Optional[bool]): If True, any existing chunks with the same doc_ids
                                               as those in the `chunks` list will be deleted before
                                               inserting the new ones. Defaults to False.
        """

    @abstractmethod
    def delete_chunks(self, doc_ids: List[str]) -> None:
        """
        Deletes chunks from the vector store based on their document id.

        Parameters:
            doc_ids (List[str]): A list of document identifiers specifying the chunks to be deleted.
        """

    @abstractmethod
    async def search_relevant_chunks(self, vector: List[float], n: int) -> List[BaseChunk]:
        """
        Searches for relevant chunks using ANN for an embedded token vector.

        Parameters:
            vector (List[float]): A vector embedding for a query token.
            n (int): The number of items to return from the search

        Returns:
            A list of chunks with doc_id and chunk_id. Fewer than 'n' results may be returned.
        """

    @abstractmethod
    async def get_chunk_embeddings(self, chunk: BaseChunk) -> Tuple[BaseChunk, List[Tensor]]:
        """
        Retrieve all the embedding data for a chunk.

        Parameters:
            chunk (BaseChunk): The chunk to return.

        Returns:
            A RetrievedChunk including doc_id, chunk_id, and the embeddings for the chunk.
        """

    @abstractmethod
    async def get_chunk_data(self, chunk: BaseChunk) -> Tuple[BaseChunk, ChunkData]:
        """
        Fetches the text and metadata for a given doc_id and chunk_id.

        Parameters:
            chunk (BaseChunk): The chunk to return.

        Returns:
            ChunkData including text and metadata for the chunk.
        """
