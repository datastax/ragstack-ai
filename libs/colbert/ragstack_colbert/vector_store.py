"""
This module defines abstract base classes for implementing storage and retrieval mechanisms for
text chunk embeddings, specifically designed to work with ColBERT or similar embedding models.
"""

from abc import ABC, abstractmethod
from typing import Any, List, Optional, Tuple, Dict
from torch import Tensor

from .chunks import EmbeddedChunk, RetrievedChunk


class ColbertVectorStore(ABC):
    """
    Abstract base class for a storage system designed to hold vector representations of text chunks,
    typically generated by a ColBERT model or similar embedding model.

    This class defines the interface for storing and managing the embedded text chunks, supporting
    operations like adding new chunks to the store and deleting existing documents by their identifiers.
    """

    @abstractmethod
    def put_chunks(
        self, chunks: List[EmbeddedChunk], delete_existing: Optional[bool] = False
    ) -> None:
        """
        Stores a list of embedded text chunks in the vector store, with an option to delete existing
        entries before insertion.

        Parameters:
            chunks (List[EmbeddedChunk]): A list of `EmbeddedChunk` instances to be stored.
            delete_existing (Optional[bool]): If True, any existing chunks with the same doc_ids
                                               as those in the `chunks` list will be deleted before
                                               inserting the new ones. Defaults to False.
        """

    @abstractmethod
    def delete_chunks(self, doc_ids: List[str]) -> None:
        """
        Deletes chunks from the vector store based on their document id.

        Parameters:
            doc_ids (List[str]): A list of document identifiers specifying the chunks to be deleted.
        """

    @abstractmethod
    async def get_relevant_chunks(self, vector: List[float], n: int) -> List[Tuple[str, int]]:
        """
        Retrieves 'n' ANN results for an embedded token vector.

        Returns:
            A set of tuples of (doc_id, chunk_id). Fewer than 'n' results may be returned.
        """

    @abstractmethod
    async def get_chunk_embeddings(self, doc_id: str, chunk_id: int) -> Tuple[Tuple[str, int], List[Tensor]]:
        """
        Retrieve all the embedding data for a chunk.

        Returns:
            A tuple where the first value is a tuple of (doc_id, chunk_id), and the second
        value is the list of embeddings for the chunk.
        """

    @abstractmethod
    async def get_chunk_text_and_metadata(self, doc_id: str, chunk_id: int) -> Tuple[str, int, str, Dict[str, Any]]:
        """
        Fetches the text for a given doc_id and chunk_id.

        Returns:
            Tuple containing the doc_id, chunk_id, text, and metadata
        """


class ColbertVectorStoreRetriever(ABC):
    """
    Abstract base class for a retrieval system that operates on a ColBERT vector store, facilitating
    the search and retrieval of text chunks based on query embeddings.
    """

    @abstractmethod
    def close(self) -> None:
        """
        Closes the retriever, releasing any resources or connections used during operation.
        Implementations should ensure that all necessary cleanup is performed to avoid resource leaks.
        """

    @abstractmethod
    def retrieve(
        self,
        query: str,
        k: Optional[int] = None,
        query_maxlen: Optional[int] = None,
        **kwargs: Any
    ) -> List[RetrievedChunk]:
        """
        Retrieves a list of text chunks relevant to a given query from the vector store, ranked by
        relevance or other metrics.

        Parameters:
            query (str): The query text to search for relevant text chunks.
            k (Optional[int]): The number of top results to retrieve.
            query_maxlen (Optional[int]): The maximum length of the query to consider. If None, the
                                          maxlen will be dynamically generated.
            **kwargs (Any): Additional parameters that implementations might require for customized
                            retrieval operations.

        Returns:
            List[RetrievedChunk]: A list of `RetrievedChunk` instances representing the retrieved
                                  text chunks, ranked by their relevance to the query.
        """


    @abstractmethod
    async def aretrieve(
        self,
        query: str,
        k: Optional[int] = None,
        query_maxlen: Optional[int] = None,
        **kwargs: Any
    ) -> List[RetrievedChunk]:
        """
        Retrieves a list of text chunks relevant to a given query from the vector store, ranked by
        relevance or other metrics.

        Parameters:
            query (str): The query text to search for relevant text chunks.
            k (Optional[int]): The number of top results to retrieve.
            query_maxlen (Optional[int]): The maximum length of the query to consider. If None, the
                                          maxlen will be dynamically generated.
            **kwargs (Any): Additional parameters that implementations might require for customized
                            retrieval operations.

        Returns:
            List[RetrievedChunk]: A list of `RetrievedChunk` instances representing the retrieved
                                  text chunks, ranked by their relevance to the query.
        """
