import secrets
from dataclasses import dataclass, field
from enum import Enum
from typing import (
    Dict,
    Iterable,
    List,
    NamedTuple,
    Optional,
    Sequence,
    Tuple,
)

import numpy as np
from cassandra.cluster import ConsistencyLevel, ResponseFuture, Session
from cassio.config import check_resolve_keyspace, check_resolve_session

from .concurrency import ConcurrentQueries
from .content import Kind
from .embedding_model import EmbeddingModel
from .links import get_links
from .math import cosine_similarity
from ._utils import batched

CONTENT_ID = "content_id"


@dataclass
class Node:
    """Node in the GraphStore"""

    id: Optional[str] = None
    """Unique ID for the node. Will be generated by the GraphStore if not set."""
    metadata: dict = field(default_factory=dict)
    """Metadata for the node. May contain information used to link this node
    with other nodes."""


@dataclass
class TextNode(Node):
    text: str = None
    """Text contained by the node."""


class SetupMode(Enum):
    SYNC = 1
    ASYNC = 2
    OFF = 3


def _row_to_node(row) -> Node:
    return TextNode(
        text=row.text_content,
        metadata={
            CONTENT_ID: row.content_id,
            "kind": row.kind,
        },
    )


@dataclass
class _Edge:
    target_content_id: str
    target_text_embedding: List[float]


def emb_to_ndarray(embedding: List[float]) -> np.ndarray:
    embedding = np.array(embedding, dtype=np.float32)
    if embedding.ndim == 1:
        embedding = np.expand_dims(embedding, axis=0)
    return embedding


@dataclass
class _Candidate:
    score: float
    similarity_to_query: float
    """Lambda * Similarity to the question."""

    embedding: np.ndarray
    """Embedding used for updating similarity to selections."""

    redundancy: float
    """(1 - Lambda) * max(Similarity to selected items)."""

    def __init__(self, embedding: List[float], lambda_mult: float, query_embedding: np.ndarray):
        self.embedding = emb_to_ndarray(embedding)

        # TODO: Refactor to use cosine_similarity_top_k to allow an array of embeddings?
        self.similarity_to_query = (
            lambda_mult * cosine_similarity(query_embedding, self.embedding)[0]
        )
        self.redundancy = 0.0
        self.score = self.similarity_to_query - self.redundancy
        self.distance = 0

    def update_for_selection(self, lambda_mult: float, selection_embedding: List[float]):
        selected_r_sim = (1 - lambda_mult) * cosine_similarity(
            selection_embedding, self.embedding
        )[0]
        if selected_r_sim > self.redundancy:
            self.redundancy = selected_r_sim
            self.score = self.similarity_to_query - selected_r_sim


class GraphStore:
    def __init__(
        self,
        embedding: EmbeddingModel,
        *,
        node_table: str = "graph_nodes",
        targets_table: str = "graph_targets",
        session: Optional[Session] = None,
        keyspace: Optional[str] = None,
        setup_mode: SetupMode = SetupMode.SYNC,
        concurrency: int = 20,
    ):
        """A hybrid vector-and-graph store backed by Cassandra.

        Document chunks support vector-similarity search as well as edges linking
        documents based on structural and semantic properties.

        Args:
            embedding: The embeddings to use for the document content.
            concurrency: Maximum number of queries to have concurrently executing.
            setup_mode: Mode used to create the Cassandra table (SYNC,
                ASYNC or OFF).
        """
        session = check_resolve_session(session)
        keyspace = check_resolve_keyspace(keyspace)

        self._concurrency = concurrency
        self._embedding = embedding
        self._node_table = node_table
        self._targets_table = targets_table
        self._session = session
        self._keyspace = keyspace

        if setup_mode == SetupMode.SYNC:
            self._apply_schema()
        elif setup_mode != SetupMode.OFF:
            raise ValueError(
                f"Invalid setup mode {setup_mode.name}. "
                "Only SYNC and OFF are supported at the moment"
            )

        # TODO: Metadata
        # TODO: Parent ID / source ID / etc.
        self._insert_passage = session.prepare(
            f"""
            INSERT INTO {keyspace}.{node_table} (
                content_id, kind, text_content, text_embedding, link_to_tags
            ) VALUES (?, '{Kind.passage}', ?, ?, ?)
            """
        )

        self._insert_tag = session.prepare(
            f"""
            INSERT INTO {keyspace}.{targets_table} (
                target_content_id, kind, tag, kind_tag, target_text_embedding
            ) VALUES (?, ?, ?, ?, ?)
            """
        )

        self._query_by_ids = session.prepare(
            f"""
            SELECT content_id, kind, text_content
            FROM {keyspace}.{node_table}
            WHERE content_id IN ?
            """
        )

        self._query_by_embedding = session.prepare(
            f"""
            SELECT content_id, kind, text_content
            FROM {keyspace}.{node_table}
            ORDER BY text_embedding ANN OF ?
            LIMIT ?
            """
        )
        self._query_by_embedding.consistency_level = ConsistencyLevel.ONE

        self._query_ids_and_link_to_tags_by_embedding = session.prepare(
            f"""
            SELECT content_id, link_to_tags
            FROM {keyspace}.{node_table}
            ORDER BY text_embedding ANN OF ?
            LIMIT ?
            """
        )
        self._query_ids_and_link_to_tags_by_embedding.consistency_level = ConsistencyLevel.ONE

        self._query_ids_and_link_to_tags_by_ids = session.prepare(
            f"""
            SELECT content_id, link_to_tags
            FROM {keyspace}.{node_table}
            WHERE content_id IN ?
            """
        )

        self._query_ids_and_embedding_by_embedding = session.prepare(
            f"""
            SELECT content_id, text_embedding
            FROM {keyspace}.{node_table}
            ORDER BY text_embedding ANN OF ?
            LIMIT ?
            """
        )
        self._query_ids_and_embedding_by_embedding.consistency_level = ConsistencyLevel.ONE

        self._query_source_tags_by_ids = session.prepare(
            f"""
            SELECT link_to_tags
            FROM {keyspace}.{node_table}
            WHERE content_id IN ?
            """
        )

        # TODO: These queries require `ALLOW FILTERING` when run against Cassandra docker images.
        # But *do not* require filtering when run against Astra.
        self._query_target_embeddings_by_kind_tags = session.prepare(
            f"""
            SELECT target_content_id, target_text_embedding, tag
            FROM {keyspace}.{targets_table}
            WHERE kind_tag IN ?
            ALLOW FILTERING
            """
        )

        self._query_targets_by_kind_tags = session.prepare(
            f"""
            SELECT target_content_id, tag
            FROM {keyspace}.{targets_table}
            WHERE kind_tag IN ?
            ALLOW FILTERING
            """
        )

    def _apply_schema(self):
        """Apply the schema to the database."""
        embedding_dim = len(self._embedding.embed_query("Test Query"))
        self._session.execute(
            f"""CREATE TABLE IF NOT EXISTS {self._keyspace}.{self._node_table} (
                content_id TEXT,
                kind TEXT,
                text_content TEXT,
                text_embedding VECTOR<FLOAT, {embedding_dim}>,

                link_to_tags SET<TUPLE<TEXT, TEXT>>,

                PRIMARY KEY (content_id)
            )
            """
        )

        self._session.execute(
            f"""CREATE TABLE IF NOT EXISTS {self._keyspace}.{self._targets_table} (
                target_content_id TEXT,
                kind TEXT,
                tag TEXT,
                -- String containing "$kind:$tag". Allows for indexing.
                kind_tag TEXT,

                -- text_embedding of target node. allows MMR to be applied without fetching nodes.
                target_text_embedding VECTOR<FLOAT, {embedding_dim}>,

                PRIMARY KEY (kind_tag, target_content_id)
            )
            """
        )

        # Index on text_embedding (for similarity search)
        self._session.execute(
            f"""CREATE CUSTOM INDEX IF NOT EXISTS {self._node_table}_text_embedding_index
            ON {self._keyspace}.{self._node_table}(text_embedding)
            USING 'StorageAttachedIndex';
            """
        )

    def _concurrent_queries(self) -> ConcurrentQueries:
        return ConcurrentQueries(self._session, concurrency=self._concurrency)

    # TODO: Async (aadd_nodes)
    def add_nodes(
        self,
        nodes: Iterable[Node] = None,
    ) -> Iterable[str]:
        texts = []
        metadatas = []
        for node in nodes:
            if not isinstance(node, TextNode):
                raise ValueError("Only adding TextNode is supported at the moment")
            texts.append(node.text)
            metadatas.append(node.metadata)

        text_embeddings = self._embedding.embed_texts(texts)

        ids = []

        tag_to_new_sources: Dict[str, List[Tuple[str, str]]] = {}
        tag_to_new_targets: Dict[str, Dict[str, Tuple[str, List[float]]]] = {}

        # Step 1: Add the nodes, collecting the tags and new sources / targets.
        with self._concurrent_queries() as cq:
            tuples = zip(texts, text_embeddings, metadatas)
            for text, text_embedding, metadata in tuples:
                if CONTENT_ID not in metadata:
                    metadata[CONTENT_ID] = secrets.token_hex(8)
                id = metadata[CONTENT_ID]
                ids.append(id)

                link_to_tags = set()  # link to these tags
                link_from_tags = set()  # link from these tags

                for link in get_links(metadata):
                    if link.direction == "incoming" or link.direction == "bidir":
                        # An incoming link should be linked *from* nodes with the given tag.
                        link_from_tags.add((link.kind, link.tag))
                    if link.direction == "outgoing" or link.direction == "bidir":
                        link_to_tags.add((link.kind, link.tag))

                cq.execute(
                    self._insert_passage,
                    (id, text, text_embedding, link_to_tags),
                )

                for kind, value in link_from_tags:
                    cq.execute(
                        self._insert_tag, (id, kind, value, f"{kind}:{value}", text_embedding)
                    )

        return ids

    def _nodes_with_ids(
        self,
        ids: Iterable[str],
    ) -> List[TextNode]:
        results = {}
        with self._concurrent_queries() as cq:

            def add_nodes(rows):
                for row in rows:
                    results[row.content_id] = _row_to_node(row)

            # Astra only allows 20 batches.
            for batch in batched(ids, 20):
                cq.execute(self._query_by_ids, parameters=(batch,), callback=add_nodes)
        return [results[id] for id in ids]

    def _linked_ids(
        self,
        source_id: str,
    ) -> Iterable[str]:
        adjacent = self._get_adjacent([source_id])
        return [edge.target_content_id for edge in adjacent]

    def mmr_traversal_search(
        self,
        query: str,
        *,
        k: int = 4,
        depth: int = 2,
        fetch_k: int = 100,
        lambda_mult: float = 0.5,
        score_threshold: float = float("-inf"),
    ) -> Iterable[TextNode]:
        """Retrieve documents from this graph store using MMR-traversal.

        This strategy first retrieves the top `fetch_k` results by similarity to
        the question. It then selects the top `k` results based on
        maximum-marginal relevance using the given `lambda_mult`.

        At each step, it considers the (remaining) documents from `fetch_k` as
        well as any documents connected by edges to a selected document
        retrieved based on similarity (a "root").

        Args:
            query: The query string to search for.
            k: Number of Documents to return. Defaults to 4.
            fetch_k: Number of Documents to fetch via similarity.
                Defaults to 10.
            depth: Maximum depth of a node (number of edges) from a node
                retrieved via similarity. Defaults to 2.
            lambda_mult: Number between 0 and 1 that determines the degree
                of diversity among the results with 0 corresponding to maximum
                diversity and 1 to minimum diversity. Defaults to 0.5.
            score_threshold: Only documents with a score greater than or equal
                this threshold will be chosen. Defaults to -infinity.
        """
        selected_ids = []
        selected_set = set()

        selected_embeddings = []  # selected embeddings. saved to compute redundancy of new nodes.

        query_embedding = self._embedding.embed_query(query)
        fetched = self._session.execute(
            self._query_ids_and_embedding_by_embedding,
            (query_embedding, fetch_k),
        )

        query_embedding = emb_to_ndarray(query_embedding)
        unselected = {
            row.content_id: _Candidate(row.text_embedding, lambda_mult, query_embedding)
            for row in fetched
        }
        best_score, next_id = max(
            [(u.score, content_id) for (content_id, u) in unselected.items()]
        )

        while len(selected_ids) < k and next_id is not None:
            if best_score < score_threshold:
                break
            selected_id = next_id
            selected_set.add(next_id)
            selected_ids.append(next_id)

            next_selected = unselected.pop(selected_id)
            selected_embedding = next_selected.embedding
            selected_embeddings.append(selected_embedding)

            best_score = float("-inf")
            next_id = None

            # Update unselected scores.
            for content_id, candidate in unselected.items():
                candidate.update_for_selection(lambda_mult, selected_embedding)
                if candidate.score > best_score:
                    best_score = candidate.score
                    next_id = content_id

            # Add unselected edges if reached nodes are within `depth`:
            next_depth = next_selected.distance + 1
            if next_depth < depth:
                adjacents = self._get_adjacent([selected_id])
                for adjacent in adjacents:
                    target_id = adjacent.target_content_id
                    if target_id in selected_set:
                        # The adjacent node is already included.
                        continue

                    if target_id in unselected:
                        # The adjancent node is already in the pending set.
                        # Update the distance if we found a shorter path to it.
                        if next_depth < unselected[target_id].distance:
                            unselected[target_id].distance = next_depth
                        continue

                    candidate = _Candidate(
                        adjacent.target_text_embedding, lambda_mult, query_embedding
                    )
                    for selected_embedding in selected_embeddings:
                        candidate.update_for_selection(lambda_mult, selected_embedding)

                    unselected[target_id] = candidate
                    if candidate.score > best_score:
                        best_score = candidate.score
                        next_id = adjacent.target_content_id

        return self._nodes_with_ids(selected_ids)

    def traversal_search(self, query: str, *, k: int = 4, depth: int = 1) -> Iterable[TextNode]:
        """Retrieve documents from this knowledge store.

        First, `k` nodes are retrieved using a vector search for the `query` string.
        Then, additional nodes are discovered up to the given `depth` from those starting
        nodes.

        Args:
            query: The query string.
            k: The number of Documents to return from the initial vector search.
                Defaults to 4.
            depth: The maximum depth of edges to traverse. Defaults to 1.
        Returns:
            Collection of retrieved documents.
        """

        # Depth 0:
        #   Query for `k` nodes similar to the question.
        #   Retrieve `content_id` and `link_to_tags`.
        #
        # Depth 1:
        #   Query for nodes that have an incoming tag in the `link_to_tags` set.
        #   Combine node IDs.
        #   Query for `link_to_tags` of those "new" node IDs.
        #
        # ...

        with self._concurrent_queries() as cq:
            # Map from visited ID to depth
            visited_ids = {}

            # Map from visited tag `(kind, tag)` to depth. Allows skipping queries
            # for tags that we've already traversed.
            visited_tags = {}

            def visit_nodes(d: int, nodes: Sequence[NamedTuple]):
                nonlocal visited_ids
                nonlocal visited_tags

                # Visit nodes at the given depth.
                # Each node has `content_id` and `link_to_tags`.

                # Iterate over nodes, tracking the *new* outgoing kind tags for this depth.
                # This is tags that are either new, or newly discovered at a lower depth.
                outgoing_tags = set()
                for node in nodes:
                    content_id = node.content_id

                    # Add visited ID. If it is closer it is a new node at this depth:
                    if d <= visited_ids.get(content_id, depth):
                        visited_ids[content_id] = d

                        # If we can continue traversing from this node,
                        if d < depth and node.link_to_tags:
                            # Record any new (or newly discovered at a lower depth) tags to the
                            # set to traverse.
                            for kind, tag in node.link_to_tags:
                                if d <= visited_tags.get((kind, tag), depth):
                                    # Record that we'll query this tag at the given depth, so we don't
                                    # fetch it again (unless we find it an earlier depth)
                                    visited_tags[(kind, tag)] = d
                                    outgoing_tags.add(f"{kind}:{tag}")

                if outgoing_tags:
                    # If there are new tags to visit at the next depth, query for the node IDs.
                    for tag_batch in batched(outgoing_tags, 20):
                        cq.execute(
                            self._query_target_embeddings_by_kind_tags,
                            parameters=(tag_batch,),
                            callback=lambda rows, d=d: visit_targets(d, rows),
                        )

            def visit_targets(d: int, targets: Sequence[NamedTuple]):
                nonlocal visited_ids

                # target_content_id, tag=(kind,value)
                new_nodes_at_next_depth = set()
                for target in targets:
                    content_id = target.target_content_id
                    if d < visited_ids.get(content_id, depth):
                        new_nodes_at_next_depth.add(content_id)

                if new_nodes_at_next_depth:
                    for ids in batched(new_nodes_at_next_depth, 20):
                        cq.execute(
                            self._query_ids_and_link_to_tags_by_ids,
                            parameters=(ids,),
                            callback=lambda rows, d=d: visit_nodes(d + 1, rows),
                        )

            query_embedding = self._embedding.embed_query(query)
            cq.execute(
                self._query_ids_and_link_to_tags_by_embedding,
                parameters=(query_embedding, k),
                callback=lambda nodes: visit_nodes(0, nodes),
            )

        return self._nodes_with_ids(visited_ids.keys())

    def similarity_search(
        self,
        embedding: List[float],
        k: int = 4,
    ) -> Iterable[TextNode]:
        for row in self._session.execute(self._query_by_embedding, (embedding, k)):
            yield _row_to_node(row)

    def _get_adjacent(
        self,
        source_ids: Iterable[str],
    ) -> Iterable[_Edge]:
        """Return the target nodes adjacent to any of the source nodes."""

        link_to_tags = set()

        def add_sources(rows):
            for row in rows:
                if row.link_to_tags:
                    link_to_tags.update(row.link_to_tags)

        with self._concurrent_queries() as cq:
            # Note: It may be more efficient to just blast out a separate query for each source ID in parallel.
            for batch in batched(source_ids, 20):
                cq.execute(self._query_source_tags_by_ids, (batch,), callback=add_sources)

        targets = dict()

        if len(link_to_tags) > 0:

            def add_targets(rows):
                # TODO: Figure out how to use the "kind" on the edge.
                # This is tricky, since we currently issue one query for anything
                # adjacent via any kind, and we don't have enough information to
                # determine which kind(s) a given target was reached from.
                for row in rows:
                    targets.setdefault(row.target_content_id, row.target_text_embedding)

            with self._concurrent_queries() as cq:
                for batch in batched(link_to_tags, 20):
                    kind_tags = {f"{kind}:{tag}" for (kind, tag) in batch}
                    # This query panics if `kind_tags` is empty, hence we only execute if `len(link_to_tags) > 0``
                    # NOTE: It may be more efficient to blast out a separate query for each source ID in parallel.
                    cq.execute(
                        self._query_target_embeddings_by_kind_tags,
                        (kind_tags,),
                        callback=add_targets,
                    )

        return [
            _Edge(target_content_id=content_id, target_text_embedding=embedding)
            for (content_id, embedding) in targets.items()
        ]
