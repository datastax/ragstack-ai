name: RAGStack CI
on:
  workflow_dispatch: {}
  schedule:
    - cron: '0 0 * * *'
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  tests:
    name: Tests
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3

      - name: Add SSH private keys for submodule repositories
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: |
            ${{ secrets.SSH_PRIVATE_KEY_LANGCHAIN_SUBMODULE }}
            ${{ secrets.SSH_PRIVATE_KEY_LANGSMITH_SUBMODULE }}

      - name: Update submodules
        run: git submodule update --init --recursive

      - name: 'Setup: Python 3.11'
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install poetry
          poetry install

      - name: Run unit tests
        run: |
          poetry run pytest tests/unit-tests

      - name: Build the distribution package
        run: |
          poetry build

      - name: Test the distribution package
        run: |
          python -m venv /tmp/venv
          source /tmp/venv/bin/activate
          pip install dist/ragstack_ai-*.whl
          pytest tests/unit-tests

      - name: Run E2E tests
        run: |
          source /tmp/venv/bin/activate
          export ASTRA_DB_TOKEN="${{ secrets.E2E_TESTS_ASTRA_DB_TOKEN }}"
          export ASTRA_DB_ENDPOINT="${{ secrets.E2E_TESTS_ASTRA_DB_ENDPOINT }}"
          export OPEN_AI_KEY="${{ secrets.E2E_TESTS_OPEN_AI_KEY }}"
          export AZURE_OPEN_AI_KEY="${{ secrets.E2E_TESTS_AZURE_OPEN_AI_KEY }}"
          export AZURE_OPEN_AI_ENDPOINT="${{ secrets.E2E_TESTS_AZURE_OPEN_AI_ENDPOINT }}"
          ./dev/run-e2e-tests.sh

      - name: Dump report on Github Summary
        if: always()
        run: |
          if [ -f "ragstack-e2e-tests/generated-compatibility-matrix.md" ]; then
            echo "$(cat ragstack-e2e-tests/generated-compatibility-matrix.md)" >> $GITHUB_STEP_SUMMARY
            echo "Report added to the summary"
          else
            echo "Report not found"
          fi

      - name: Prepare report for Slack
        if: always() && (github.event_name == 'schedule' || github.event_name == 'workflow_dispatch')
        run: |
          if [ -f "ragstack-e2e-tests/generated-compatibility-matrix.txt" ]; then
            {
              echo -n '{"content": "'
              cat ragstack-e2e-tests/generated-compatibility-matrix.txt | sed 's/"/\\"/g' | while IFS= read -r line; do
                echo -n "$line\n"
              done
              echo "\",\"commit\":\"$(git rev-parse --short HEAD)\",\"url\":\"${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}\",\"type\":\"ragstack\"}"
            } > slack-report.json
            echo "Slack report generated"
            cat slack-report.json
          else
            echo "{}" > slack-report.json
          fi

      - name: Dump report on Slack
        if: always() && (github.event_name == 'schedule' || github.event_name == 'workflow_dispatch')
        uses: slackapi/slack-github-action@v1.24.0
        with:
          payload-file-path: "./slack-report.json"
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Run LangChain tests
        run: |
          source /tmp/venv/bin/activate
          export ASTRA_DB_TOKEN="${{ secrets.E2E_TESTS_ASTRA_DB_TOKEN }}"
          export ASTRA_DB_ENDPOINT="${{ secrets.E2E_TESTS_ASTRA_DB_ENDPOINT }}"
          ./dev/run-langchain-e2e-tests.sh