name: RAGStack CI
on:
  workflow_dispatch: {}
  schedule:
    - cron: '0 0 * * *'
  pull_request:
    paths-ignore:
      - '.github/workflows/langchain-master-daily.yml'
      - '.github/workflows/llamaindex-main-daily.yml'
      - '.github/workflows/release-ragstack.yml'
      - '.github/workflows/security-scan.yml'
      - 'docs/**'
      - 'README.md'
    branches:
      - main

concurrency:
  group: ragstack-ci-${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3

      - name: 'Setup: Python 3.11'
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install tox

      - name: Run ragstack-ai unit tests
        run: |
          tox

  setup-astra-prod:
    name: Setup AstraDB prod
    runs-on: ubuntu-latest
    steps:
      - name: Setup AstraDB prod
        shell: bash
        env:
          TERM: linux
        run: |
          set -x
          (curl -Ls "https://dtsx.io/get-astra-cli" | bash) || true
          /home/runner/.astra/cli/astra db create -v "${{ github.run_id }}" --env PROD -k default_keyspace --token "${{ secrets.E2E_TESTS_ASTRA_PROD_DB_TOKEN }}" --vector --region us-east-2 --cloud aws

  setup-astra-dev:
    name: Setup AstraDB dev
    runs-on: ubuntu-latest
    steps:
      - name: Setup AstraDB dev
        shell: bash
        env:
          TERM: linux
        run: |
          set -x
          (curl -Ls "https://dtsx.io/get-astra-cli" | bash) || true
          /home/runner/.astra/cli/astra db create -v "${{ github.run_id }}" --env DEV -k default_keyspace --token "${{ secrets.E2E_TESTS_ASTRA_DEV_DB_TOKEN }}" --vector --region us-west-2 --cloud aws

  e2e-tests:
    name: End-to-end Tests
    runs-on: ubuntu-latest
    needs: [setup-astra-prod, setup-astra-dev]
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3

      - name: 'Setup: Python 3.11'
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install tox

      - name: Get AstraDB prod ID
        uses: ./.github/actions/get-astra-db-id
        id: astra-db-prod
        with:
          astra-token: ${{ secrets.E2E_TESTS_ASTRA_PROD_DB_TOKEN }}
          db-name: ${{ github.run_id }}
          env: PROD
          region: us-east-2

      - name: Get AstraDB dev ID
        uses: ./.github/actions/get-astra-db-id
        id: astra-db-dev
        with:
          astra-token: ${{ secrets.E2E_TESTS_ASTRA_DEV_DB_TOKEN }}
          db-name: ${{ github.run_id }}
          env: DEV
          region: us-west-2

      - name: Run notebook tests
        env:
          ASTRA_DB_APPLICATION_TOKEN: "${{ secrets.E2E_TESTS_ASTRA_PROD_DB_TOKEN }}"
          ASTRA_DB_API_ENDPOINT: "${{ steps.astra-db-prod.outputs.db_endpoint }}"
          ASTRA_DB_ID: "${{ steps.astra-db-prod.outputs.db_id }}"
          OPENAI_API_KEY: "${{ secrets.E2E_TESTS_OPEN_AI_KEY }}"
        run: |
          tox -e notebooks

      - name: Run E2E tests
        id: e2e-tests
        if: always() && (steps.astra-db-prod.outcome == 'success' && steps.astra-db-dev.outcome == 'success')
        env:
          ASTRA_DEV_DB_TOKEN: "${{ secrets.E2E_TESTS_ASTRA_DEV_DB_TOKEN }}"
          ASTRA_DEV_DB_ENDPOINT: "${{ steps.astra-db-dev.outputs.db_endpoint }}"
          ASTRA_DEV_DB_ID: "${{ steps.astra-db-dev.outputs.db_id }}"
          ASTRA_PROD_DB_TOKEN: "${{ secrets.E2E_TESTS_ASTRA_PROD_DB_TOKEN }}"
          ASTRA_PROD_DB_ENDPOINT: "${{ steps.astra-db-prod.outputs.db_endpoint }}"
          ASTRA_PROD_DB_ID: "${{ steps.astra-db-prod.outputs.db_id }}"
          OPEN_AI_KEY: "${{ secrets.E2E_TESTS_OPEN_AI_KEY }}"
          AZURE_OPEN_AI_KEY: "${{ secrets.E2E_TESTS_AZURE_OPEN_AI_KEY }}"
          AZURE_OPEN_AI_ENDPOINT: "${{ secrets.E2E_TESTS_AZURE_OPEN_AI_ENDPOINT }}"
          GCLOUD_ACCOUNT_KEY_JSON: "${{ secrets.E2E_TESTS_GCLOUD_ACCOUNT_KEY_JSON }}"
          AWS_ACCESS_KEY_ID: "${{ secrets.E2E_TESTS_AWS_ACCESS_KEY_ID }}"
          AWS_SECRET_ACCESS_KEY: "${{ secrets.E2E_TESTS_AWS_SECRET_ACCESS_KEY }}"
          BEDROCK_AWS_REGION: "${{ secrets.E2E_TESTS_BEDROCK_AWS_REGION }}"
          HUGGINGFACE_HUB_KEY: "${{ secrets.E2E_TESTS_HUGGINGFACE_HUB_KEY }}"
        run: |
          tox -c ragstack-e2e-tests

      - name: Dump report on Github Summary
        if: always()
        run: |
          if [ -f "ragstack-e2e-tests/all-tests-report.txt" ]; then
            echo "$(cat ragstack-e2e-tests/all-tests-report.txt)" >> $GITHUB_STEP_SUMMARY
            echo "Report added to the summary"
          else
            echo "Report not found"
          fi

      - name: Compute commit URL
        if: always() && (github.event_name == 'schedule' || github.event_name == 'workflow_dispatch')
        id: commit-ref
        run: echo "commit-ref=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      - name: Prepare report for Slack
        if: always() && (github.event_name == 'schedule' || github.event_name == 'workflow_dispatch')
        uses: ./.github/actions/generate-slack-report
        with:
          from-report-file: ragstack-e2e-tests/failed-tests-report.txt
          output-file: slack-report.json
          type: "RAGStack Tests"
          outcome: ${{ steps.e2e-tests.outcome }}
          commit-url: "https://github.com/datastax/ragstack-ai/commits/${{ steps.commit-ref.outputs.commit-ref }}"

      - name: Dump report on Slack
        if: always() && (github.event_name == 'schedule' || github.event_name == 'workflow_dispatch')
        uses: slackapi/slack-github-action@v1.24.0
        with:
          payload-file-path: "./slack-report.json"
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  cleanup-astra-prod:
    name: Cleanup Astra prod
    runs-on: ubuntu-latest
    if: always()
    needs: [e2e-tests]
    steps:
      - name: Cleanup Astra prod
        if: always()
        continue-on-error: true
        shell: bash
        env:
          TERM: linux
        run: |
          (curl -Ls "https://dtsx.io/get-astra-cli" | bash) || true
          /home/runner/.astra/cli/astra db delete "${{ github.run_id }}" --token ${{ secrets.E2E_TESTS_ASTRA_PROD_DB_TOKEN }} --env PROD

  cleanup-astra-dev:
    name: Cleanup Astra dev
    runs-on: ubuntu-latest
    if: always()
    needs: [e2e-tests]
    steps:
      - name: Cleanup Astra dev
        if: always()
        continue-on-error: true
        shell: bash
        env:
          TERM: linux
        run: |
          (curl -Ls "https://dtsx.io/get-astra-cli" | bash) || true
          /home/runner/.astra/cli/astra db delete "${{ github.run_id }}" --token ${{ secrets.E2E_TESTS_ASTRA_DEV_DB_TOKEN }} --env DEV

