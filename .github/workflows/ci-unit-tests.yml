name: CI - RAGStack tests
on:
  pull_request:
    branches:
      - main

concurrency:
  group: ragstack-tests-${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  preconditions:
    name: Preconditions
    runs-on: ubuntu-latest
    outputs:
      docker_examples: ${{ steps.filter.outputs.docker_examples }}
      libs_colbert: ${{ steps.filter.outputs.libs_colbert }}
      libs_langchain: ${{ steps.filter.outputs.libs_langchain }}
      libs_llamaindex: ${{ steps.filter.outputs.libs_llamaindex }}
      libs_knowledge_store: ${{ steps.filter.outputs.libs_knowledge_store }}
      libs_knowledge_graph: ${{ steps.filter.outputs.libs_knowledge_graph }}
      integration_tests: ${{ steps.filter.outputs.integration_tests }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: ./.github/changes-filter.yaml

  build-docker:
    name: Docker
    runs-on: ubuntu-latest
    needs: ["preconditions"]
    if: ${{ needs.preconditions.outputs.docker_examples == 'true' }}
    steps:
      - name: Check out the repo
        uses: actions/checkout@v4

      - name: Docker examples - basic
        run: |
          docker --version
          cd docker/examples/basic
          sudo docker build -t ragstack-basic .

      - name: Docker examples - multistage
        run: |
          cd docker/examples/multistage
          sudo docker build -t ragstack-multistage .
      - name: Docker examples - local llm
        run: |
          cd docker/examples/local-llm
          sudo docker build -t local-llm .

  unit-tests:
    name: Unit Tests (Python ${{ matrix.python-version }})
    needs: ["preconditions"]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version:
          - "3.12"
          - "3.11"
          - "3.10"
          - "3.9"
    steps:
      - name: Check out the repo
        uses: actions/checkout@v4

      - name: "Setup: Python ${{ matrix.python-version }}"
        uses: ./.github/actions/setup-python
        with:
          python-version: "${{ matrix.python-version }}"

      - name: Run lint
        if: ${{ matrix.python-version != '3.12' }}
        uses: ./.github/actions/lint

      - name: "Unit tests (root)"
        run: tox -e unit-tests && rm -rf .tox

      - name: "Unit tests (colbert)"
        if: ${{ needs.preconditions.outputs.libs_colbert == 'true'}}
        run: tox -e unit-tests -c libs/colbert && rm -rf libs/colbert/.tox

      - name: "Unit tests (langchain)"
        if: ${{ needs.preconditions.outputs.libs_langchain == 'true'}}
        run: tox -e unit-tests -c libs/langchain && rm -rf libs/langchain/.tox

      - name: "Unit tests (llamaindex)"
        if: ${{ needs.preconditions.outputs.libs_llamaindex == 'true'}}
        run: tox -e unit-tests -c libs/llamaindex && rm -rf libs/llamaindex/.tox

      - name: "Unit tests (knowledge-store)"
        if: ${{ needs.preconditions.outputs.libs_knowledge_store == 'true' && matrix.python-version != '3.9' }}
        env:
          OPENAI_API_KEY: "${{ secrets.E2E_TESTS_OPEN_AI_KEY }}"
        run: tox -e unit-tests -c libs/knowledge-store && rm -rf libs/knowledge-store/.tox

      - name: "Unit tests (knowledge-graph)"
        # yamllint disable-line rule:line-length
        if: ${{ needs.preconditions.outputs.libs_knowledge_graph == 'true' && matrix.python-version != '3.9' && matrix.python-version != '3.10' }}
        env:
          OPENAI_API_KEY: "${{ secrets.E2E_TESTS_OPEN_AI_KEY }}"
        run: tox -e unit-tests -c libs/knowledge-graph && rm -rf libs/knowledge-graph/.tox

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    if: ${{ needs.preconditions.outputs.integration_tests == 'true' }}
    needs: ["preconditions"]
    timeout-minutes: 30
    steps:
      - name: Check out the repo
        uses: actions/checkout@v4

      - name: "Setup: Python 3.11"
        uses: ./.github/actions/setup-python

      - name: Setup AstraDB
        uses: nicoloboschi/setup-astradb@v1
        id: astra-db
        with:
          token: ${{ secrets.E2E_TESTS_ASTRA_DEV_DB_TOKEN }}
          env: "DEV"
          region: "us-central1"
          cloud: "gcp"

      - name: "Integration tests"
        env:
          ASTRA_DB_TOKEN: "${{ secrets.E2E_TESTS_ASTRA_DEV_DB_TOKEN }}"
          ASTRA_DB_ID: "${{ steps.astra-db.outputs.id }}"
          ASTRA_DB_ENV: "DEV"
        run: |
          set -ex
          run_itests() {
            local dir=$1
            tox -e integration-tests -c $dir
            rm -rf $dir/.tox
          }

          run_itests libs/colbert
          run_itests libs/langchain
          run_itests libs/llamaindex

      - name: Cleanup AstraDB
        uses: nicoloboschi/cleanup-astradb@v1
        if: ${{ always() && steps.astra-db.outputs.name != '' }}
        with:
          token: ${{ secrets.E2E_TESTS_ASTRA_DEV_DB_TOKEN }}
          name: ${{ steps.astra-db.outputs.name }}
          env: "DEV"
          wait: false
