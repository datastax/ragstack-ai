name: Run E2E tests
on:
  workflow_call:
    inputs:
      title:
        description: "Title"
        required: true
        type: string
      suite-name:
        type: string
      run-tests:
        type: boolean
        default: true
      run-notebooks:
        type: boolean
        default: false
      astradb:
        description: "Whether to use AstraDB or not"
        required: true
        type: boolean
      astradb-token-secret-name:
        description: "AstraDB token"
        required: false
        type: string
      astradb-env:
        description: "AstraDB env"
        type: string
        required: false
      astradb-region:
        description: "AstraDB region"
        required: false
        type: string
      astradb-cloud:
        description: "AstraDB cloud"
        required: false
        type: string
      vector-database-type:
        description: "Vector database type"
        type: string
      deploy-to-slack:
        description: "Whether to deploy to Slack or not"
        default: true
        type: boolean
      deploy-to-testspace:
        description: "Whether to deploy to TestSpace or not"
        default: false
        type: boolean
      testspace-space:
        description: "TestSpace space to deploy to"
        required: false
        type: string

jobs:
  tests:
    name: "${{ inputs.title }}"
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repo
        uses: actions/checkout@v4

      - name: "Setup: Python 3.11"
        uses: ./.github/actions/setup-python

      - name: Compute db name
        id: db-name
        run: |
          echo "db-name=${{ github.run_id}}-$(echo $(for((i=1;i<=8;i++))
          do printf '%s' "${RANDOM:0:1}"; done) | tr '[0-9]' '[a-z]')" >> $GITHUB_OUTPUT

      - name: Setup AstraDB
        uses: ./.github/actions/setup-astra-db
        id: astra-db
        timeout-minutes: 10
        if: ${{ inputs.astradb }}
        with:
          astra-token: ${{ secrets[inputs.astradb-token-secret-name] }}
          db-name: ${{ steps.db-name.outputs.db-name }}
          env: ${{ inputs.astradb-env }}
          region: ${{ inputs.astradb-region }}
          cloud: ${{ inputs.astradb-cloud }}

      - name: Run notebook tests
        if: ${{ inputs.run-notebooks }}
        env:
          ASTRA_DB_APPLICATION_TOKEN: "${{ secrets[inputs.astradb-token-secret-name] }}"
          ASTRA_DB_API_ENDPOINT: "${{ steps.astra-db.outputs.db_endpoint }}"
          ASTRA_DB_ID: "${{ steps.astra-db.outputs.db_id }}"
          OPENAI_API_KEY: "${{ secrets.E2E_TESTS_OPEN_AI_KEY }}"
          LANGCHAIN_API_KEY: "${{ secrets.E2E_TESTS_LANGCHAIN_API_KEY }}"
          LLAMA_CLOUD_API_KEY: "${{ secrets.E2E_TESTS_LLAMA_CLOUD_API_KEY }}"
          GCLOUD_ACCOUNT_KEY_JSON: "${{ secrets.E2E_TESTS_GCLOUD_ACCOUNT_KEY_JSON }}"
          NVIDIA_API_KEY: "${{ secrets.E2E_TESTS_NVIDIA_API_KEY }}"
          UNSTRUCTURED_API_KEY: "${{ secrets.E2E_TESTS_UNSTRUCTURED_API_KEY }}"
          UNSTRUCTURED_API_URL: "${{ secrets.E2E_TESTS_UNSTRUCTURED_API_URL }}"
        run: |
          source scripts/ci-common-env.sh
          tox -e notebooks

      - name: Run E2E tests
        id: e2e-tests
        if: ${{ inputs.run-tests }}
        env:
          VECTOR_DATABASE_TYPE: "${{ inputs.vector-database-type }}"
          ASTRA_DB_APPLICATION_TOKEN: "${{ secrets[inputs.astradb-token-secret-name] }}"
          ASTRA_DB_API_ENDPOINT: "${{ steps.astra-db.outputs.db_endpoint }}"
          ASTRA_DB_ID: "${{ steps.astra-db.outputs.db_id }}"
          ASTRA_DB_ENV: "${{ inputs.astradb-env }}"
          OPENAI_API_KEY: "${{ secrets.E2E_TESTS_OPEN_AI_KEY }}"
          AZURE_OPENAI_API_KEY: "${{ secrets.E2E_TESTS_AZURE_OPEN_AI_KEY }}"
          AZURE_OPENAI_ENDPOINT: "${{ secrets.E2E_TESTS_AZURE_OPEN_AI_ENDPOINT }}"
          AZURE_BLOB_STORAGE_CONNECTION_STRING: "${{ secrets.E2E_TESTS_AZURE_BLOB_STORAGE_CONNECTION_STRING }}"
          GCLOUD_ACCOUNT_KEY_JSON: "${{ secrets.E2E_TESTS_GCLOUD_ACCOUNT_KEY_JSON }}"
          GOOGLE_API_KEY: "${{ secrets.E2E_TESTS_GOOGLE_API_KEY }}"
          AWS_ACCESS_KEY_ID: "${{ secrets.E2E_TESTS_AWS_ACCESS_KEY_ID }}"
          AWS_SECRET_ACCESS_KEY: "${{ secrets.E2E_TESTS_AWS_SECRET_ACCESS_KEY }}"
          BEDROCK_AWS_REGION: "${{ secrets.E2E_TESTS_BEDROCK_AWS_REGION }}"
          HUGGINGFACE_HUB_KEY: "${{ secrets.E2E_TESTS_HUGGINGFACE_HUB_KEY }}"
          NVIDIA_API_KEY: "${{ secrets.E2E_TESTS_NVIDIA_API_KEY }}"
          LANGCHAIN_API_KEY: "${{ secrets.E2E_TESTS_LANGCHAIN_API_KEY }}"
          LLAMA_CLOUD_API_KEY: "${{ secrets.E2E_TESTS_LLAMA_CLOUD_API_KEY }}"
          UNSTRUCTURED_API_KEY: "${{ secrets.E2E_TESTS_UNSTRUCTURED_API_KEY }}"
          UNSTRUCTURED_API_URL: "${{ secrets.E2E_TESTS_UNSTRUCTURED_API_URL }}"
        run: |
          source scripts/ci-common-env.sh
          # workaround for FileLocked https://github.com/datastax/ragstack-ai/actions/runs/8629355336/job/23653432063?pr=316
          rm -rf **/.tox
          if [ "${{ inputs.suite-name == 'ragstack' }}" == "true" ]; then
            tox -c libs/e2e-tests
          elif [ "${{ inputs.suite-name == 'langchain' }}" == "true" ]; then
            tox -c libs/e2e-tests -e langchain
          elif [ "${{ inputs.suite-name == 'llamaindex' }}" == "true" ]; then
            tox -c libs/e2e-tests -e llamaindex
          elif [ "${{ inputs.suite-name == 'ragstack-latest-release' }}" == "true" ]; then
            tox -c libs/e2e-tests -e ragstack-ai-latest
          else
            echo "Unknown suite name: ${{ inputs.suite-name }}"
            exit 1
          fi

      - name: Dump report on Github Summary
        if: ${{ always() }}
        uses: ./.github/actions/add-report-to-github-summary

      - name: Compute info
        if: ${{ always() }}
        id: info
        run: |
          if [ "${{ inputs.suite-name == 'ragstack' }}" == "true" ]; then
            commit_ref=$(git rev-parse --short HEAD)
            echo "commit-url=https://github.com/datastax/ragstack-ai/commits/${commit_ref}" >> $GITHUB_OUTPUT

          elif [ "${{ inputs.suite-name == 'langchain' }}" == "true" ]; then
            commit_ref=$(grep resolved_reference libs/e2e-tests/poetry.lock | awk -F'"' '{print $2}' | head -1)
            echo "commit-url=https://github.com/langchain-ai/langchain/commits/${commit_ref}" >> $GITHUB_OUTPUT

          elif [ "${{ inputs.suite-name == 'llamaindex' }}" == "true" ]; then
            commit_ref=$(grep resolved_reference libs/e2e-tests/poetry.lock | awk -F'"' '{print $2}' | head -1)
            echo "commit-url=https://github.com/run-llama/llama_index/commits/${commit_ref}" >> $GITHUB_OUTPUT

          elif [ "${{ inputs.suite-name == 'ragstack-latest-release' }}" == "true" ]; then
            (tox run -c libs/e2e-tests -e get-latest-ragstack-ai-version -q) | tail -3 | head -n 1 > /tmp/ragstack-ai-version
            cat /tmp/ragstack-ai-version
            ragstack_version=$(cat /tmp/ragstack-ai-version)
            echo "commit-url=https://pypi.org/project/ragstack-ai/${ragstack_version}" >> $GITHUB_OUTPUT
          fi

      - name: Slack deploy report
        if: ${{ always() && inputs.deploy-to-slack }}
        uses: ./.github/actions/deploy-slack-report
        with:
          from-report-file: "libs/e2e-tests/failed-tests-report.txt"
          type: "${{ inputs.title }}"
          outcome: ${{ steps.e2e-tests.outcome }}
          commit-url: "${{ steps.info.outputs.commit-url }}"
          slack-webhook-url: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Testspace deploy report
        uses: ./.github/actions/deploy-testspace-report
        if: ${{ always() && inputs.deploy-to-testspace }}
        with:
          report-type: tests
          token: ${{ secrets.TESTSPACE_TOKEN }}
          report-file: libs/e2e-tests/results.xml
          space: ${{ inputs.testspace-space }}

      - name: Cleanup AstraDB
        uses: ./.github/actions/cleanup-astra-db
        if: ${{ always() && inputs.astradb }}
        with:
          astra-token: ${{ secrets[inputs.astradb-token-secret-name] }}
          db-name: ${{ steps.db-name.outputs.db-name }}
          env: ${{ inputs.astradb-env }}
